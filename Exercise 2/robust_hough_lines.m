function [ lines ] = robust_hough_lines( hs, n, E )
%ROBUST_HOUGH_LINES extracts line segments from an edge image and a hough
%accumulator array created with robust_hough
%   lines = ROBUST_HOUGH_LINES (hs, n, I)
%   where hs is the hough structure generated by robust_hough,
%   n is the number of lines that should be extracted,
%   I is the edge image,
%   and lines is a struct the contains the most dominant line segments
[rows cols] = size(E);
s = 3;
js = 3;
for k=1:n
    phi = hs.peaks (k,2)*pi/180;
    nx = cos(phi);
    ny = sin(phi);
    off = hs.peaks (k,1)-hs.offset;
    alpha = off/(nx*nx+ny*ny);
    rx = alpha*nx;
    ry = alpha*ny;
    taus = [];
    for v=1:rows
        for u=1:cols
            if (E(v,u))
                d = abs(nx*(u-hs.u0-rx)+ny*(v-hs.v0-ry));
                if (d<=s)
                    t = ny*(u-hs.u0-rx)-nx*(v-hs.v0-ry);
                    taus = [ taus t ];
                end
            end
        end
    end
    taus = sort (taus);
    taus = [ taus taus(length(taus))+2*js ];
    curjunk_i = 1;
    lines(k).point1 = [];
    lines(k).point2 = [];
    lines(k).length = [];
    for i=2:length(taus)
        if (taus(i)-taus(i-1)>js)
            curjunk_len = i-curjunk_i;
            if (curjunk_len>=20)
                lines(k).point1 = [ lines(k).point1; rx+taus(curjunk_i)*ny+hs.u0 ry-taus(curjunk_i)*nx+hs.v0 ];
                lines(k).point2 = [ lines(k).point2; rx+taus(curjunk_i+curjunk_len-1)*ny+hs.u0 ry-taus(curjunk_i+curjunk_len-1)*nx+hs.v0 ];
                lines(k).length = [ lines(k).length curjunk_len ];
            end
            curjunk_i = i;
        end
    end
end
end

